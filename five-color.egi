;;;
;;; 5-color
;;;

(define $node [integer (maybe integer)])
(define $graph (set [node (list node)])) ;heimengraphnisuru, tokeimawari

(define $N 4)
(define $colors (between 1 N))

(define $main
  (lambda [$graph-data]
    (match graph-data graph
      {; jisuuga 5 ikano node wo remove suru
;       [<cons (& [[$id (nothing)] !<cons _ <cons _ <cons _ <cons _ <cons _ <cons _ _>>>>>>] $node-info) _>
         [<cons (& [[$id (nothing)] !<cons _
                                           (loop $i [2 N]
                                             <cons _
                                                   ...>
                                             _)>] $node-info) _>
        (colorize id (add-node node-info (main (remove-node id graph-data))))]
       ; empty graph
       [<nil> graph-data]})))

(define $colorize
  (lambda [$id $graph-data]
    (match [colors graph-data] [(set integer) graph]
      {; 周りのノードでまだ5色全部使われていない場合．
       [[<cons $c _> <cons [[,id (nothing)] !<join _ <cons [_ (just ,c)] _>>] _>]
        (assign-color id c graph-data)]
       ; r次数が5で周りで5色全部使われているノードしか残っていない場合．
;       [[_ <cons [[,id (nothing)] <cons [$nid_1 (just $c_1)] <cons [$nid_2 (just $c_2)] <cons [$nid_3 (just $c_3)] <cons [$nid_4 (just $c_4)] <cons [$nid_5 (just $c_5)] <nil>>>>>>] _>]
         [[_ <cons [[,id (nothing)] <cons [$nid_1 (just $c_1)]
                                          (loop $i [2 N]
                                            <cons [$nid_i (just $c_i)]
                                                  ...>
                                            <nil>)>] _>]
        (match graph-data graph
          ; nid1 to nid3 ga c1 to c3 de tunagaru patan wo sagasu
          {[<cons [[,nid_1 _] <join _ <cons [$cnid_1 (| (just ,c_1) (just ,c_3))] _>>]
                  (loop $i [2 $n]
                    <cons [[,cnid_(- i 1) _] <join _ <cons [$cnid_i (| (just ,c_1) (just ,c_3))] _>>]
                          ...>
                    <cons [[,cnid_n _] <join _ <cons [,nid_3 (| (just ,c_1) (just ,c_3))] _>>] _>)>
            ; 2 to 4 wo junnbannni kakikae
            (assign-color id c_2 (flip-color id nid_2 c_2 c_4 graph-data))]
           [_ (assign-color id c_1 (flip-color id nid_1 c_1 c_3 graph-data))]})]
       })))

      
(define $assign-color
  (lambda [$id $c $graph-data]
    (map (lambda [$n]
           [(rewrite-node id c (2#%1 n)) (map (lambda [$n] (rewrite-node id c n)) (2#%2 n))])
         graph-data)))

(define $rewrite-node
  (lambda [$id $c $n]
    (match n node
      {[[,id (nothing)] [id (Just c)]]
       [_ n]})))

(define $remove-node
  (lambda [$id $graph-data]
    (match-all graph-data graph
      [<cons (& ![[,id _] _] [$nid $edges]) _>
       [nid (match-all edges (multiset node)
              [<cons (& ![,id _] $n) _> n])]])))

;(define $add-node
;  (lambda [$node-info $graph-data]
;    {node-info @graph-data}))

(define $add-node
  (lambda [$node-info $graph-data]
    {[(fst node-info)
      (match-all [(snd node-info) graph-data] [(set node) graph]
        {[[<cons [$id _] _> <cons [[,id $c] _] _>] [id c]]
         [[<cons [$id $c] _> !<cons [[,id _] _] _>] [id c]]})]
     @(match-all [graph-data (snd node-info)] [graph (set node)]
        {[[<cons [[$id $c] $edges] _> <cons [,id _] _>] [[id c] {(fst node-info) @edges}]]
         [[<cons [[$id $c] $edges] _> !<cons [,id _] _>] [[id c] edges]]})}))
;match-all no kaerichi ha set nanoka list nanoka de kokoga kawaru
;{} de kakonnda kekkaha dottika?
;modosu tokini junbann wo oboetenaito dame!!
;list de yaruyori junban mo data ni motaseta houga yoi?

(define $flip-color
  (lambda [$id1 $id2 $c1 $c2 $graph-data] ;id1 ga 1ko mae, id2 no iro wo kaeru, id1 to chigau houkouhe susumu
    (match graph-data graph
      {[<cons [[,id1 _] <join _ <cons (& [$id3 ,c1] ![id1 _]) _>>] _> (assign-color id2 c2 (flip-color id2 id3 c2 c1))]
       [_ (assign-color id2 c2 graph-data)]})))

;(rewrite-node 1 5 [1 Nothing]) ; [1 {5}]
;(assign-color 1 5 graph-data) ; {[[1 {5}] {[2 {}]}] [[2 {}] {[1 {5}]}]}
;(remove-node 1 graph-data) ;{[[2 {}] {}]}
;(add-node [[1 Nothing] {[2 Nothing]}] (main (remove-node 1 graph-data))) ;{[[1 {}] {[2 {1}]}] [[2 {1}] {[1 {}]}]}

(define $graph-data
  {[[1 Nothing] {[2 Nothing]}]
   [[2 Nothing] {[1 Nothing]}]})
;(main graph-data)
; {[[1 {1}] {[2 {2}]}] [[2 {2}] {[1 {1}]}]}
(map fst (main graph-data))

(define $graph-data2
  {[[1 Nothing] {[2 Nothing] [3 Nothing]}]
   [[2 Nothing] {[1 Nothing]}]
   [[3 Nothing] {[1 Nothing]}]})
;(main graph-data2)
;{[[1 {2}] {[2 {1}] [3 {1}]}] [[2 {1}] {[1 {2}]}] [[3 {1}] {[1 {2}]}]}
(map fst (main graph-data2))

;graph no error check ga aruto yoi

(define $graph-data3
  {[[1 Nothing] {[2 Nothing] [3 Nothing]}]
   [[2 Nothing] {[1 Nothing] [3 Nothing]}]
   [[3 Nothing] {[1 Nothing] [2 Nothing]}]})
;(main graph-data3)
;{[[1 {3}] {[2 {2}] [3 {1}]}] [[2 {2}] {[1 {3}] [3 {1}]}] [[3 {1}] {[1 {3}] [2 {2}]}]}
(map fst (main graph-data3))

(define $graph-data4
  {[[1 Nothing] {[2 Nothing] [3 Nothing] [4 Nothing]}]
   [[2 Nothing] {[1 Nothing] [3 Nothing] [4 Nothing]}]
   [[3 Nothing] {[1 Nothing] [2 Nothing] [4 Nothing]}]
   [[4 Nothing] {[1 Nothing] [2 Nothing] [3 Nothing]}]})
;(main graph-data4)
;{[[1 {4}] {[2 {3}] [3 {2}] [4 {1}]}] [[2 {3}] {[1 {4}] [3 {2}] [4 {1}]}] [[3 {2}] {[1 {4}] [2 {3}] [4 {1}]}] [[4 {1}] {[1 {4}] [2 {3}] [3 {2}]}]}
(map fst (main graph-data4))

(define $graph-data5
  {[[1 Nothing] {[2 Nothing] [3 Nothing] [4 Nothing] [5 Nothing]}]
   [[2 Nothing] {[1 Nothing] [3 Nothing] [5 Nothing]}]
   [[3 Nothing] {[1 Nothing] [2 Nothing] [4 Nothing]}]
   [[4 Nothing] {[1 Nothing] [3 Nothing] [5 Nothing]}]
   [[5 Nothing] {[1 Nothing] [2 Nothing] [4 Nothing]}]})
;(main graph-data5)
;{[[1 {3}] {[2 {2}] [3 {1}] [4 {2}] [5 {1}]}] [[2 {2}] {[1 {3}] [3 {1}] [5 {1}]}] [[3 {1}] {[1 {3}] [2 {2}] [4 {2}]}] [[5 {1}] {[1 {3}] [2 {2}] [4 {2}]}] [[4 {2}] {[1 {3}] [3 {1}] [5 {1}]}]}
(map fst (main graph-data5))

(define $graph-honshu
  {[[2 Nothing] {[3 Nothing] [5 Nothing]}]
   [[3 Nothing] {[2 Nothing] [4 Nothing] [5 Nothing]}]
   [[4 Nothing] {[3 Nothing] [7 Nothing] [6 Nothing] [5 Nothing]}]
   [[5 Nothing] {[2 Nothgin] [3 Nothing] [4 Nothing] [6 Nothing]}]
   [[6 Nothing] {[5 Nothing] [4 Nothing] [7 Nothing] [15 Nothing]}]
   [[7 Nothing] {[4 Nothing] [8 Nothing] [9 Nothing] [10 Nothing] [15 Nothing] [6 Nothing]}]
   [[8 Nothing] {[7 Nothing] [12 Nothing] [11 Nothing] [9 Nothing]}]
   [[9 Nothing] {[7 Nothing] [8 Nothing] [11 Nothing] [10 Nothing]}]
   [[10 Nothing] {[7 Nothing] [9 Nothing] [11 Nothing] [20 Nothing] [15 Nothing]}]
   [[11 Nothing] {[10 Nothing] [9 Nothing] [8 Nothing] [12 Nothing] [13 Nothing] [19 Nothing] [20 Nothing]}]
   [[12 Nothing] {[8 Nothing] [13 Nothing] [11 Nothing]}]
   [[13 Nothing] {[11 Nothing] [12 Nothing] [14 Nothing] [19 Nothing]}]
   [[14 Nothing] {[13 Nothing] [22 Nothing] [19 Nothing]}]
   [[15 Nothing] {[6 Nothing] [7 Nothing] [10 Nothing] [20 Nothing] [16 Nothing]}]
   [[16 Nothing] {[15 Nothing] [20 Nothing] [21 Nothing] [17 Nothing]}]
   [[17 Nothing] {[16 Nothing] [21 Nothing] [18 Nothing]}]
   [[18 Nothing] {[17 Nothing] [21 Nothing] [25 Nothing] [26 Nothing]}]
   [[19 Nothing] {[11 Nothing] [13 Nothing] [14 Nothing] [22 Nothing] [20 Nothing]}]
   [[20 Nothing] {[15 Nothing] [10 Nothing] [11 Nothing] [19 Nothing] [22 Nothing] [23 Nothing] [21 Nothing] [16 Nothing]}]
   [[21 Nothing] {[16 Nothing] [20 Nothing] [23 Nothing] [24 Nothing] [25 Nothing] [18 Nothing] [17 Nothing]}]
   [[22 Nothing] {[20 Nothing] [19 Nothing] [14 Nothing] [23 Nothing]}]
   [[23 Nothing] {[21 Nothing] [20 Nothing] [22 Nothing] [24 Nothing]}]
   [[24 Nothing] {[25 Nothing] [21 Nothing] [23 Nothing] [30 Nothing] [29 Nothing]}]
   [[25 Nothing] {[18 Nothing] [21 Nothing] [24 Nothing] [26 Nothing]}]
   [[26 Nothing] {[18 Nothing] [25 Nothing] [29 Nothing] [27 Nothing] [28 Nothing]}]
   [[27 Nothing] {[26 Nothing] [29 Nothing] [30 Nothing] [28 Nothing]}]
   [[28 Nothing] {[26 Nothing] [27 Nothing] [33 Nothing] [31 Nothing]}]
   [[29 Nothing] {[26 Nothing] [24 Nothing] [30 Nothing] [27 Nothing]}]
   [[30 Nothing] {[27 Nothing] [29 Nothing] [24 Nothing]}]
   [[31 Nothing] {[28 Nothing] [33 Nothing] [34 Nothing] [32 Nothing]}]
   [[32 Nothing] {[31 Nothing] [34 Nothing] [35 Nothing]}]
   [[33 Nothing] {[28 Nothing] [34 Nothing] [31 Nothing]}]
   [[34 Nothing] {[32 Nothing] [31 Nothing] [33 Nothing] [35 Nothing]}]
   [[35 Nothing] {[32 Nothing] [34 Nothing]}]})
;(main graph-honshu)
;{[[2 {3}] {[3 {1}] [5 {2}]}] [[3 {1}] {[2 {3}] [4 {3}] [5 {2}]}] [[5 {2}] {[2 {3}] [3 {1}] [4 {3}] [6 {1}]}] [[4 {3}] {[3 {1}] [7 {4}] [6 {1}] [5 {2}]}] [[6 {1}] {[4 {3}] [5 {2}] [7 {4}] [15 {2}]}] [[7 {4}] {[4 {3}] [6 {1}] [8 {3}] [9 {2}] [10 {1}] [15 {2}]}] [[15 {2}] {[6 {1}] [7 {4}] [10 {1}] [16 {1}] [20 {3}]}] [[8 {3}] {[7 {4}] [9 {2}] [11 {4}] [12 {1}]}] [[9 {2}] {[7 {4}] [8 {3}] [11 {4}] [10 {1}]}] [[10 {1}] {[7 {4}] [9 {2}] [11 {4}] [20 {3}] [15 {2}]}] [[11 {4}] {[8 {3}] [9 {2}] [10 {1}] [12 {1}] [13 {2}] [19 {1}] [20 {3}]}] [[12 {1}] {[8 {3}] [11 {4}] [13 {2}]}] [[20 {3}] {[10 {1}] [11 {4}] [15 {2}] [16 {1}] [19 {1}] [23 {1}] [21 {4}] [22 {2}]}] [[13 {2}] {[11 {4}] [12 {1}] [14 {3}] [19 {1}]}] [[19 {1}] {[11 {4}] [13 {2}] [14 {3}] [20 {3}] [22 {2}]}] [[14 {3}] {[13 {2}] [22 {2}] [19 {1}]}] [[22 {2}] {[14 {3}] [19 {1}] [20 {3}] [23 {1}]}] [[16 {1}] {[15 {2}] [17 {2}] [21 {4}] [20 {3}]}] [[17 {2}] {[16 {1}] [21 {4}] [18 {1}]}] [[21 {4}] {[16 {1}] [17 {2}] [18 {1}] [20 {3}] [23 {1}] [24 {3}] [25 {2}]}] [[18 {1}] {[17 {2}] [21 {4}] [18 {1}]}] [[23 {1}] {[20 {3}] [21 {4}] [22 {2}] [24 {3}]}] [[24 {3}] {[21 {4}] [23 {1}] [25 {2}] [29 {2}] [30 {1}]}] [[25 {2}] {[21 {4}] [24 {3}] [26 {1}]}] [[29 {2}] {[24 {3}] [26 {1}] [27 {3}] [30 {1}]}] [[30 {1}] {[24 {3}] [27 {3}] [29 {2}]}] [[26 {1}] {[25 {2}] [27 {3}] [29 {2}] [28 {2}]}] [[27 {3}] {[26 {1}] [28 {2}] [29 {2}] [30 {1}]}] [[28 {2}] {[26 {1}] [27 {3}] [31 {4}] [33 {1}]}] [[31 {4}] {[28 {2}] [34 {2}] [32 {3}] [33 {1}]}] [[33 {1}] {[28 {2}] [31 {4}] [34 {2}]}] [[32 {3}] {[31 {4}] [34 {2}] [35 {1}]}] [[34 {2}] {[31 {4}] [32 {3}] [33 {1}] [35 {1}]}] [[35 {1}] {[32 {3}] [34 {2}]}]}
(map fst (main graph-honshu))


;junbannno mondai ha mikaiketu
