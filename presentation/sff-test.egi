(define $p 3)

(define $coef-map
  (lambda [$f $P $x]
    (sum' (map2 2#(*' %1 (**' x %2)) (map f (coefficients P x)) nats0))))

;operation on Fp[x]
(define $coef-mod
  (lambda [$P]
    (coef-map 1#(modulo %1 p) P x)))

(define $p.b.+
  (lambda [%x %y] (coef-mod (+ x y))))

(define $p.+
  (cambda $xs (foldl p.b.+ (car xs) (cdr xs))))

(define $p.b.-
  (lambda [%x %y] (coef-mod (- x y))))

(define $p.-
  (cambda $xs (foldl p.b.- (car xs) (cdr xs))))

(define $p.b.*
  (lambda [%x %y] (coef-mod (* x y))))

(define $p.*
  (cambda $xs (foldl p.b.* (car xs) (cdr xs))))

(define $p.inv
  (lambda [%x]
    (car (filter (lambda [$a] (eq? (p.* a x) 1)) (take p nats)))))

(define $p.b./
  (lambda [%x %y] (p.* x (p.inv y))))

(define $p./
  (cambda $xs (foldl p.b./ (car xs) (cdr xs))))

(define $p.**
  (lambda [$x $n]
    (match n integer
      {[,0 1]
       [_ (p.* x (p.** x (- n 1)))]})))

(define $p.L./
  (lambda [$xs $ys]
    (if (lt? (length xs) (length ys))
      [{} xs]
      (match [ys xs] [(list math-expr) (list math-expr)]
        {
         [[<cons $y $yrs> <cons $x $xrs>]
          (let {[[$zs $rs] (p.L./ {@(map2 p.- (take (length yrs) xrs) (map (p.* $ (p./ x y)) yrs))
                                 @(drop (length yrs) xrs)} ys)]}
            [{(p./ x y) @zs} rs])]
         }))))

(define $p.P./
  (lambda [$fx $gx $x]
    (let* {[$as (reverse (coefficients fx x))]
           [$bs (reverse (coefficients gx x))]
           [[$zs $rs] (p.L./ as bs)]}
      [(sum' (map2 2#(*' %1 (**' x %2)) (reverse zs) nats0))
       (sum' (map2 2#(*' %1 (**' x %2)) (reverse rs) nats0))])))

(define $monic
  (lambda [$f $x]
    (/ f (rac (coefficients f x)))))

(define $p.monic
  (lambda [$f $x]
    (p./ f (rac (coefficients f x)))))

;gcd(f,0)=f
(define $gcd
  (lambda [$f $g $x]
    (if (eq? g 0) f
      (let {[$q (fst (P./ f g x))] [$r (snd (P./ f g x))]}
        (match r math-expr
          {[,0 (monic g x)]
           [_ (gcd g r x)]})))))

(define $p.gcd
  (lambda [$f $g $x]
    (if (eq? g 0) f
      (let {[$q (fst (p.P./ f g x))] [$r (snd (p.P./ f g x))]}
        (match r math-expr
          {[,0 (p.monic g x)]
           [_ (p.gcd g r x)]})))))

(define $deg
  (lambda [$f $x]
    (length (coefficients f x))))

(define $p.d/d
  (lambda [$f $x]
    (coef-mod (∂/∂ f x))))

;square free factorizatin in ch p
;rewrite p-th power (x^p -> x)              
(define $rewrite-rule-p-power
  (lambda [$term]
    (match term math-expr
      {[(* $a ,x^(& ?(divisor? $ p) $k) $r)
        (*' a r (**' x (/ k p)))]
       [_ term]})))

(define $p-inv (map-terms rewrite-rule-p-power $))
(define $f (** x 2))
f
(p-inv f)
(define $g (** x 3))
g
(p-inv g)

(define $step
  (lambda [$i $w $c]
    (let* {[$y (p.gcd w c x)]
           [$fac (fst (p.P./ w y x))]}
      (match y math-expr
        {[,1 {[(fst (p.P./ c y x))] [fac i]}]
         [_ (cons [fac i] (step (+ i 1) y (fst (p.P./ c y x))))]}))))

(define $SFFp'
  (lambda [$f $x]
    (let* {[$g (p.d/d f x)]
           [$c (p.gcd f g x)]
           [$w (fst (p.P./ f c x))]
           [$R (step 1 w c)]}
      (match (car R) math-expr
        {[,1 R]
         [_ (append R (SFFp' (p-inv (car R)) x))]}))))

(define $h (+ (** x 11) (* (** x 9) 2) (* (** x 8) 2) (** x 6) (** x 5) (* (** x 3) 2) (* (** x 2) 2) 1))
h
(SFFp' h x)