(define $node [integer (maybe integer)])
(define $graph (set [node (list node)]))

(define $rewrite-node
(lambda [$id $c $n] (match n node
{[[,id _] [id (Just c)]]
 [_ n]})))
 
(define $assign-color
(lambda [$id $c $graph-data] (map (lambda [$n]
[(rewrite-node id c (2#%1 n))
(map (lambda [$n] (rewrite-node id c n)) (2#%2 n))])
graph-data)))

(define $flip-color
(lambda [$id1 $id2 $c1 $c2 $graph-data]
(match graph-data graph
{[<cons [[,id2 (just ,c1)] <join _ <cons (& [$id3 (just ,c2)] ![,id1 _]) _>>] _>
     (assign-color id2 c2 (flip-color id2 id3 c2 c1 graph-data))]
[_ (assign-color id2 c2 graph-data)]})))

(define $graph-data
{[[1 Nothing] {[2 (Just 1)]}]
[[2 (Just 1)] {[3 (Just 2)] [1 Nothing]}]
[[3 (Just 2)] {[4 (Just 1)] [2 (Just 1)]}]
[[4 (Just 1)] {[5 (Just 2)] [3 (Just 2)]}]
[[5 (Just 2)] {[4 (Just 1)] [6 (Just 3)]}]
[[6 (Just 3)] {[5 (Just 2)]}]})

(flip-color 1 2 1 2 graph-data)

(define $graph-data2
{[[1 Nothing] {[2 (Just 1)]}]
[[2 (Just 1)] {[3 (Just 2)] [1 Nothing]}]
[[3 (Just 2)] {[4 (Just 1)] [2 (Just 1)]}]
[[4 (Just 1)] {[5 (Just 2)] [3 (Just 2)] [6 (Just 2)]}]
[[5 (Just 2)] {[4 (Just 1)]}]
[[6 (Just 2)] {[4 (Just 1)]}]})

(flip-color 1 2 1 2 graph-data2)
